---
import { getCollection, type CollectionKey } from "astro:content";
import type { GenericEntry } from "@/types";

export const getPages = async (
  collection: CollectionKey,
  sortFunction?: ((array: any[]) => any[]),
  noIndex = true,
  noDrafts = true
): Promise<GenericEntry[]> => {
  let entries: GenericEntry[] = await getCollection(collection);
  entries = noIndex
    ? entries.filter((entry: GenericEntry) => entry.id.match(/^(?!-)/))
    : entries;
  entries = noDrafts
    ? entries.filter((entry: GenericEntry) => 'draft' in entry.data && !entry.data.draft)
    : entries;
  entries = sortFunction ? sortFunction(entries) : entries;
  return entries;
};

export const getSinglePages = async (collection: any): Promise<any[]> => {
  const allPage = await getCollection(collection);
  const removeIndex = allPage.filter((data: any) => data.id.match(/^(?!-)/));
  const removeDrafts = removeIndex.filter((data: any) => !data.data.draft);
  removeDrafts.sort((a, b) => {
    return a.data.order - b.data.order;
  });
  return removeDrafts;
};

// Fetch all pages in all searchable collections
export const getSinglePagesBatch = async (
  collections: string[]
): Promise<any[]> => {
  const allCollections = await Promise.all(
    collections.map(async (collection) => {
      return await getSinglePages(collection);
    })
  );
  return allCollections.flat();
};

// Fetch top-level folders as groups
export const getGroups = async (collection: any): Promise<any[]> => {
  const allPage = await getCollection(collection);
  const groups = allPage.filter((data: any) => {
    const segments = data.id.split("/");
    return segments.length === 1 && segments[0] !== "index";
  });
  return groups;
};

// Fetch documents within a specific group
export const getDocumentsInGroup = async (
  collection: any,
  groupSlug: string
): Promise<any[]> => {
  const allPage = await getCollection(collection);
  const documents = allPage.filter((data: any) => {
    const segments = data.id.split("/");
    return segments[0] === groupSlug && segments.length > 1;
  });
  return documents;
};
---
