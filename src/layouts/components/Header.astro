---
import ThemeSwitcher from "@/components/ThemeSwitcher.astro";
import config from "@/config/config.json";
import menu from "@/config/menu.json";
import { IoSearch, IoClose } from "react-icons/io5/index.js";

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

const { main }: { main: NavigationLink[] } = menu;
const { settings } = config;
const { pathname } = Astro.url;
---

<header class={`header z-30 ${settings.sticky_header && "sticky top-0"}`}>
  <nav class="navbar container">
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      for="nav-toggle"
      class="order-0 cursor-pointer flex items-center lg:hidden text-dark dark:text-white lg:order-1"
    >
      <svg id="show-button" class="h-6 fill-current block" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
      <svg id="hide-button" class="h-6 fill-current hidden" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->
    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full pb-6 lg:order-1 lg:flex lg:w-auto lg:space-x-2 lg:pb-0 xl:space-x-8"
    >
      {
        main.map((menu) => (
          <>
            {menu.hasChildren ? (
              <li class="nav-item nav-dropdown group relative">
                <span
                  class={`nav-link inline-flex items-center ${
                    menu.children?.map(({ url }) => url).includes(pathname) ||
                    menu.children
                      ?.map(({ url }) => `${url}/`)
                      .includes(pathname)
                      ? "active"
                      : ""
                  }`}
                >
                  {menu.name}
                  <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </span>
                <ul class="nav-dropdown-list hidden group-hover:block lg:invisible lg:absolute lg:block lg:opacity-0 lg:group-hover:visible lg:group-hover:opacity-100">
                  {menu.children?.map((child) => (
                    <li class="nav-dropdown-item">
                      <a
                        href={child.url}
                        class={`nav-dropdown-link block ${
                          (pathname === `${child.url}/` ||
                            pathname === child.url) &&
                          "active"
                        }`}
                      >
                        {child.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            ) : (
              <li class="nav-item">
                <a
                  href={menu.url}
                  class={`nav-link block ${
                    (pathname === `${menu.url}/` || pathname === menu.url) &&
                    "active"
                  }`}
                >
                  {menu.name}
                </a>
              </li>
            )}
          </>
        ))
      }
    </ul>
    <div class="order-1 ml-auto flex items-center lg:order-2 lg:ml-0">
      <div class="mr-4 flex items-center">
        <ThemeSwitcher />
      </div>
      
      {
        settings.search && (
          // <a
          //   class="mr-5 inline-block border-border text-xl text-dark hover:text-primary dark:border-darkmode-border dark:text-white"
          //   href="/search"
          //   aria-label="search"
          // >
          //   <IoSearch />
          // </a>
          <>

            <div class="lg:hidden border-border text-xl text-dark hover:text-primary dark:text-white flex items-center hover:rotate-12 transition-all duration-300">
              <button id="mobile-search" aria-label="Search">
                <IoSearch />
              </button>
            </div>
            

            <span class="z-20 bg-theme-light dark:bg-darkmode-theme-light rounded-md max-lg:!mx-[10%] max-lg:absolute max-lg:left-0 max-lg:w-[80%] max-lg:rounded-md hidden lg:flex lg:space-x-4 flex-row-reverse py-2 px-2">
              
              <div
                id="mobile-search-close"
                class="cursor-pointer lg:hidden lg:mr-1 flex items-center text-xl text-dark hover:text-primary dark:text-white hover:rotate-12 transition-all duration-300"
              >
                <IoClose />
              </div>

              <input
                id="search"
                type="text"
                class="max-lg:text-lg bg-transparent border-transparent w-full lg:w-60 focus:outline-none p-0 m-0"
                placeholder="Search..."
              />
              
              <div class="text-xl m-0 p-0 text-dark hover:text-primary dark:border-darkmode-border dark:text-white flex items-center">
                <IoSearch />
              </div>

              <div
                id="results"
                class="peer-placeholder-shown:hidden empty:hidden focus:block absolute top-16 max-lg:-mr-2 w-full lg:w-72  rounded-lg overflow-y-auto max-h-96 lg:max-h-72"
              />
            </span>
          </>
        )
      }
    </div>
  </nav>
</header>

<script is:inline>
  document.querySelector("#mobile-search")?.addEventListener("click", () => {
    document.querySelector("#search")?.parentElement.classList.toggle("hidden");
    document.querySelector("#search")?.parentElement.classList.toggle("flex");
  });

  document
    .querySelector("#mobile-search-close")
    ?.addEventListener("click", () => {
      document.querySelector("#search")?.parentElement.classList.add("hidden");
      document.querySelector("#search")?.parentElement.classList.remove("flex");
    });

  document.querySelector("#search")?.addEventListener("input", async (e) => {
    // only load the pagefind script once
    if (e.target.dataset.loaded !== "true") {
      e.target.dataset.loaded = "true";
      // load the pagefind script
      window.pagefind = await import("/pagefind/pagefind.js");
    }

    // search the index using the input value
    const search = await window.pagefind.search(e.target.value);

    // clear the old results
    document.querySelector("#results").innerHTML = "";

    // add the new results
    for (const result of search.results) {
      const data = await result.data();
      document.querySelector("#results").innerHTML += `
        <a href="${data.url}" class="block px-4 py-2 hover:bg-zinc-100 dark:hover:bg-zinc-700">
          <h3 class="font-bold">${data.meta.title}</h3>
          <p>${data.excerpt}</p>
        </a>`;
    }
  });
</script>
