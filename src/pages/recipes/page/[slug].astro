---
import config from "@/config/config.json";
import Base from "@layouts/Base.astro";
import { getSinglePages } from "@/lib/contentParser.astro";
import { sortByDate } from "@/lib/utils/sortFunctions";
import { getEntry } from "astro:content";
import type { RecipesEntry } from "@/types";
import RecipeGroup from "@layouts/RecipeGroup.astro";

const { slug } = Astro.params;
const pageNumber = slug && !isNaN(Number(slug)) ? Number(slug) : 1;
const postIndex = await getEntry("recipes", "-index");
const posts: RecipesEntry[] = await getSinglePages("recipes");
const sortedPosts: RecipesEntry[] = sortByDate(posts);
const totalPages = Math.ceil(posts.length / config.settings.pagination);
const indexOfLastPost = pageNumber * config.settings.pagination;
const indexOfFirstPost = indexOfLastPost - config.settings.pagination;
const currentPosts = sortedPosts.slice(indexOfFirstPost, indexOfLastPost);

export async function getStaticPaths() {
  const posts: RecipesEntry[] = await getSinglePages("recipes");
  const totalPages = Math.ceil(posts.length / config.settings.pagination);
  const paths = [];

  for (let i = 1; i < totalPages; i++) {
    paths.push({
      params: {
        slug: (i + 1).toString(),
      },
    });
  }
  return paths;
}
---

<Base
  title={postIndex.data.title}
  image={postIndex.data.image?.src}
  description={postIndex.data.description}
>
  <RecipeGroup
    postIndex={postIndex}
    currentPosts={currentPosts}
    pageNumber={pageNumber}
    totalPages={totalPages}
  />
</Base>
