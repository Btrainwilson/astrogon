---
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getSinglePages } from "@/lib/contentParser.astro";
import { getAllTaxonomy, getTaxonomy } from "@/lib/taxonomyParser.astro";
import { sortByDate } from "@/lib/utils/sortFunctions";
import { getEntry } from "astro:content";
import type { BlogEntry } from "@/types";
import BlogGroup from "@/layouts/BlogGroup.astro";

const { slug } = Astro.params;
const currentPage = slug && !isNaN(Number(slug)) ? Number(slug) : 1;
const postIndex = await getEntry("blog", "-index");
const posts: BlogEntry[] = await getSinglePages("blog");
const allCategories = await getAllTaxonomy("blog", "categories");
const categories = await getTaxonomy("blog", "categories");
const tags = await getTaxonomy("blog", "tags");
const sortedPosts: BlogEntry[] = sortByDate(posts);
const totalPages = Math.ceil(posts.length / config.settings.pagination);
const indexOfLastPost = currentPage * config.settings.pagination;
const indexOfFirstPost = indexOfLastPost - config.settings.pagination;
const currentPosts = sortedPosts.slice(indexOfFirstPost, indexOfLastPost);

export async function getStaticPaths() {
  const posts: BlogEntry[] = await getSinglePages("blog");
  const totalPages = Math.ceil(posts.length / config.settings.pagination);
  const paths = [];

  for (let i = 1; i < totalPages; i++) {
    paths.push({
      params: {
        slug: (i + 1).toString(),
      },
    });
  }
  return paths;
}
---

<Base
  title={postIndex.data.title}
  image={postIndex.data.image}
  description={postIndex.data.description}
>
  <BlogGroup
    postIndex={postIndex}
    currentPosts={currentPosts}
    totalPages={totalPages}
    categories={categories}
    tags={tags}
    allCategories={allCategories}
    currentPage={currentPage}
  />
</Base>
