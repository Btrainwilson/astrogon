---
import type { DocsEntry } from "@/types";
import DocSingle from "@layouts/DocSingle.astro";
import DocGroup from "@layouts/DocGroup.astro";
import { getEntries, getEntriesInGroup } from "@/lib/contentParser";
import { sortByTitle } from "@/lib/sortFunctions";

export async function getStaticPaths() {
  const entries = (await getEntries("docs", sortByTitle)) as DocsEntry[];

  const paths = entries.map((entry) => {
    const segments = entry.id.replace("/-index", "").split("/");

    if (segments.length === 1) {
      return {
        params: { id: segments[0] },
        props: { entry, isGroup: true },
      };
    } else if (segments.length === 2) {
      return {
        params: { id: entry.id },
        props: { entry, isGroup: false },
      };
    }
  });

  return paths;
}

const entries = (await getEntries("docs", sortByTitle)) as DocsEntry[];
entries.forEach((entry) => {
  // console.log(entry.id);
  // console.log(entry.id.replace("-index", "").split("/"));
  console.log( entry.id.replace("/-index", "").split("/"));
});
  

const { entry, isGroup } = Astro.props;
const groupName = entry.id.replace("/-index", "");
const groupEntries = isGroup
  ? ((await getEntriesInGroup("docs", groupName, sortByTitle)) as DocsEntry[])
  : [];
---

{
  isGroup ? (
    <DocGroup collectionIndex={entry} entries={groupEntries} />
  ) : (
    <DocSingle entry={entry} />
  )
}
