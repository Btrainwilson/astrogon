---
import type { DocsEntry } from "@/types";
import DocSingle from "@layouts/DocSingle.astro";
import DocGroup from "@layouts/DocGroup.astro";
import { getEntries, getEntriesInGroup } from "@/lib/contentParser";
import { sortByTitle } from "@/lib/sortFunctions";

export async function getStaticPaths() {
  const entries = await getEntries("docs", sortByTitle, false) as DocsEntry[];

  const paths = entries.map((entry) => {
    const segments = entry.id.split("/");
    if (segments.length === 1) {
      return {
        params: { id: segments[0] },
        props: { entry, isGroup: true },
      };
    } else {
      return {
        params: { id: entry.id },
        props: { entry, isGroup: false },
      };
    }
  });

  return paths;
}

const { entry, isGroup } = Astro.props;

const groupEntries: DocsEntry[] | [] = isGroup
  ? await getEntriesInGroup("docs", entry.id)
  : [];
---

{isGroup ? <DocGroup collectionIndex={entry} entries={groupEntries} /> : <DocSingle entry={entry} />}
