---
import type { DocsEntry } from "@/types";
import Base from "@layouts/Base.astro";
import DocSingle from "@layouts/DocSingle.astro";
import DocGroup from "@layouts/DocGroup.astro";
import { getSinglePages, getDocumentsInGroup } from "@/lib/contentParser";

export async function getStaticPaths() {
  type path_type = {
    params: { id: string };
    props: {
      post: DocsEntry;
      isGroup: boolean;
    };
  };

  const docs: DocsEntry[] = await getSinglePages("docs");
  const paths: path_type[] = [];

  docs.forEach((post) => {
    const segments = post.id.split("/");
    if (segments.length === 1) {
      paths.push({
        params: { id: segments[0] },
        props: { post, isGroup: true },
      });
    } else {
      paths.push({
        params: { id: post.id },
        props: { post, isGroup: false },
      });
    }
  });

  return paths;
}

const { post, isGroup } = Astro.props;

const documents: DocsEntry[] | [] = isGroup ? await getDocumentsInGroup("docs", post.id) : [];
---

<Base
  title={post.data.title}
  image={post.data.image}
  description={post.data.description}
>
  {isGroup ? (
    <DocGroup documents={documents} />
  ) : (
    <DocSingle post={post} />
  )}
</Base>
